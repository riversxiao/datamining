theme_economist()+
ggtitle("Loan Original Amount")+
xlab("Loan Amount") + ylab("Count")
category <- ggplot(data = ds,aes(ds$LoanOriginalAmount))
category+
geom_histogram(fill ='red',binwidth = 2000)+
theme_economist()+
ggtitle("Loan Original Amount")+
xlab("Loan Amount") + ylab("Count")
category <- ggplot(data = ds,aes(ds$LoanOriginalAmount))
category+
geom_histogram(fill ='red',binwidth = 1000)+
theme_economist()+
ggtitle("Loan Original Amount")+
xlab("Loan Amount") + ylab("Count")
#create category bar chart to represent the number of each listing
category <- ggplot(data = ds,aes(ds$ListingCategory))
category+
geom_bar(fill ='red')+
scale_x_continuous(breaks=seq(1,20,2))+
scale_y_log10()+
scale_colour_economist()+
theme_economist()+
ggtitle("Listing Category")+
xlab("Listing Type") + ylab("Count")
#create category bar chart to represent the number of each listing
category <- ggplot(data = ds,aes(ds$ListingCategory))
category+
geom_bar(fill ='red')+
scale_x_continuous(breaks=seq(1,20,2))+
scale_y_log10()+
scale_colour_economist()+
theme_economist()+
ggtitle("Listing Category")+
xlab("Listing Type") + ylab("Count In Log Scale")
Return_to_Score <- ggplot(aes(ProsperScore,
EstimatedReturn,
group = ProsperScore),
data = ds) +
geom_boxplot(outlier.size=1.5, alpha =0.2)+
stat_summary(fun.y="mean", geom="point", shape=23, size=1, fill="orange")+
theme_economist()+
scale_x_continuous(breaks=seq(0,11,1))+
xlab("Prosper Score") + ylab("Estimated Return") +
ggtitle('Estimated Return With Prosper Score')
grid.arrange(Return_to_Score)
ds$ProsperScore = as.numeric(ds$ProsperScore)
meanProsperScore <- ds[c('ProsperScore', 'LoanStatus')] %>%
filter(ProsperScore!="NA")%>%
group_by(LoanStatus) %>%
summarise (mean = mean(ProsperScore), median = median(ProsperScore))
meanProsperScore <- melt(as.data.frame(meanProsperScore), id = 'LoanStatus')
Score_to_loanStatus<- ggplot(aes(LoanStatus, value, fill = variable), data= subset(meanProsperScore,meanProsperScore$LoanStatus
%in%
c('Defaulted', 'Chargedoff', 'Completed', 'Current'))) +
geom_bar(stat="identity", position = 'dodge',alpha = 0.7)+
theme_economist()+
xlab("Loan Status") + ylab("Average Prosper Score") +
ggtitle('Score With Loan Status')
grid.arrange(Score_to_loanStatus)
#default loan group by score
Default_loan <- loan_rr_table %>%
filter( LoanStatus %in% c('Chargedoff','Default'))%>%
group_by(Score)%>%
summarise(Default = sum(LoanAmount))
All_loan <- loan_rr_table %>%
group_by(Score)%>%
summarise(Total = sum(LoanAmount))
risk_return <- merge(Default_loan,All_loan,by ='Score')%>%
mutate(ratio = Default/Total)
Default_to_Score <- ggplot(risk_return,aes(Score,ratio))+
geom_bar(stat ='identity')+
geom_smooth(colour="blue")+
theme_economist() +
scale_x_continuous(breaks=seq(0,11,1))+
xlab("Prosper Score") + ylab("Default Ratio") +
ggtitle('Default Ratio With Prosper Score')
grid.arrange(Default_to_Score)
#create a table including loan return ,loan status , amount , date,rating
loan_rr_table <- data.frame(ds$LoanStatus,
ds$BorrowerRate,
ds$LoanOriginalAmount,
ds$LoanOriginationDate,
ds$ProsperScore)
colnames(loan_rr_table)[1:5] <- c('LoanStatus',
'BorrowerRate',
'LoanAmount',
'LoanDate',
'Score')
loan_rr_table <- filter(loan_rr_table,
as.Date(LoanDate)>as.Date('2009-07-31'))
Amount_to_Score <- ggplot(loan_rr_table,aes(Score,
LoanAmount,group=Score))+
geom_boxplot(alpha =0.5)+
theme_economist()+
scale_x_continuous(breaks=seq(0,11,1))+
xlab("Prosper Score") + ylab("Loan Amount") +
ggtitle('Loan Amount With Prosper Score')
grid.arrange(Amount_to_Score)
Population_to_Score <- ggplot(aes(ProsperScore, Investors), data = ds) +
geom_jitter(alpha =0.05)+
stat_summary(fun.y="mean", geom="point", shape=21, size=1, fill='white')+
theme_economist()+
scale_x_continuous(breaks=seq(0,11,1))+
xlab("Prosper Score") + ylab("Investor Population") +
ggtitle('Investor Population With Prosper Score')
grid.arrange(Population_to_Score)
Population_to_Score <- ggplot(aes(ProsperScore, Investors), data = ds) +
geom_jitter(alpha =0.05)+
stat_summary(fun.y="mean", geom="point", shape=21, size=1, fill='white')+
theme_economist()+
scale_x_continuous(breaks=seq(0,11,1))+
geom_smooth()+
xlab("Prosper Score") + ylab("Investor Population") +
ggtitle('Investor Population With Prosper Score')
grid.arrange(Population_to_Score)
Population_to_Score <- ggplot(aes(ProsperScore, Investors), data = ds) +
geom_jitter(alpha =0.05)+
stat_summary(fun.y="mean", geom="point", shape=21, size=1, fill='white')+
theme_economist()+
scale_x_continuous(breaks=seq(0,11,1))+
geom_smooth(method = 'loess')+
xlab("Prosper Score") + ylab("Investor Population") +
ggtitle('Investor Population With Prosper Score')
grid.arrange(Population_to_Score)
Population_to_Score <- ggplot(aes(ProsperScore, Investors), data = ds) +
geom_jitter(alpha =0.05)+
stat_summary(fun.y="mean", geom="point", shape=21, size=1, fill='white')+
theme_economist()+
scale_x_continuous(breaks=seq(0,11,1))+
geom_smooth()+
xlab("Prosper Score") + ylab("Investor Population") +
ggtitle('Investor Population With Prosper Score')
grid.arrange(Population_to_Score)
Population_to_Score <- ggplot(aes(ProsperScore, Investors), data = ds) +
geom_jitter(alpha =0.05)+
stat_summary(fun.y="mean", geom="point", shape=21, size=1, fill='white')+
theme_economist()+
scale_x_continuous(breaks=seq(0,11,1))+
geom_smooth(alpha =0.4)+
xlab("Prosper Score") + ylab("Investor Population") +
ggtitle('Investor Population With Prosper Score')
grid.arrange(Population_to_Score)
Investor_to_LoanAmount <- ggplot(ds,aes(LoanOriginalAmount,Investors))+
geom_point(alpha =0.1,color ='#374785')+
theme_economist()+
xlab("Loan Amount") + ylab("Investor Population") +
ggtitle('Investor Population With Loan Amount')
grid.arrange(Investor_to_LoanAmount)
rate_investors <- ggplot(ds,aes(BorrowerRate,Investors))+
geom_point(alpha = 0.05,color ='#374785')+
theme_economist()+
xlab("Borrow Rate") + ylab("Investor Population") +
ggtitle('Investor Population With Borrow Rate')
grid.arrange(rate_investors)
rate_investors <- ggplot(ds,aes(BorrowerRate,Investors))+
geom_point(alpha = 0.05,color ='#374785')+
theme_economist()+
geom_smooth()+
xlab("Borrow Rate") + ylab("Investor Population") +
ggtitle('Investor Population With Borrow Rate')
grid.arrange(rate_investors)
Population_to_Score <- ggplot(aes(ProsperScore, Investors), data = ds) +
geom_violin(alpha =0.05)+
stat_summary(fun.y="mean", geom="point", shape=21, size=1, fill='white')+
theme_economist()+
scale_x_continuous(breaks=seq(0,11,1))+
xlab("Prosper Score") + ylab("Investor Population") +
ggtitle('Investor Population With Prosper Score')
grid.arrange(Population_to_Score)
Population_to_Score <- ggplot(aes(factor(ProsperScore), Investors), data = ds) +
geom_violin(alpha =0.05)+
stat_summary(fun.y="mean", geom="point", shape=21, size=1, fill='white')+
theme_economist()+
scale_x_continuous(breaks=seq(0,11,1))+
xlab("Prosper Score") + ylab("Investor Population") +
ggtitle('Investor Population With Prosper Score')
grid.arrange(Population_to_Score)
Population_to_Score <- ggplot(aes(factor(ProsperScore), Investors), data = ds) +
geom_violin(alpha =0.05)+
stat_summary(fun.y="mean", geom="point", shape=21, size=1, fill='white')+
theme_economist()+
scale_x_discrete(breaks=seq(0,11,1))+
xlab("Prosper Score") + ylab("Investor Population") +
ggtitle('Investor Population With Prosper Score')
grid.arrange(Population_to_Score)
Population_to_Score <- ggplot(aes(factor(ProsperScore), Investors), data = ds) +
geom_violin(alpha =0.05)+
stat_summary(fun.y="mean", geom="point", shape=21, size=1, fill='white')+
theme_economist()+
scale_y_log10()+
scale_x_discrete(breaks=seq(0,11,1))+
xlab("Prosper Score") + ylab("Investor Population") +
ggtitle('Investor Population With Prosper Score')
grid.arrange(Population_to_Score)
Population_to_Score <- ggplot(aes(factor(ProsperScore), Investors), data = ds) +
geom_violin(alpha =0.05)+
stat_summary(fun.y="mean", geom="point", shape=21, size=1, fill='white')+
theme_economist()+
scale_y_log2()+
scale_x_discrete(breaks=seq(0,11,1))+
xlab("Prosper Score") + ylab("Investor Population") +
ggtitle('Investor Population With Prosper Score')
Population_to_Score <- ggplot(aes(factor(ProsperScore), Investors), data = ds) +
geom_violin(alpha =0.05)+
stat_summary(fun.y="mean", geom="point", shape=21, size=1, fill='white')+
theme_economist()+
scale_y_ln()+
scale_x_discrete(breaks=seq(0,11,1))+
xlab("Prosper Score") + ylab("Investor Population") +
ggtitle('Investor Population With Prosper Score')
Population_to_Score <- ggplot(aes(factor(ProsperScore), Investors), data = ds) +
geom_violin(alpha =0.05)+
stat_summary(fun.y="mean", geom="point", shape=21, size=1, fill='white')+
theme_economist()+
scale_y_sqrt()+
scale_x_discrete(breaks=seq(0,11,1))+
xlab("Prosper Score") + ylab("Investor Population") +
ggtitle('Investor Population With Prosper Score')
grid.arrange(Population_to_Score)
Population_to_Score <- ggplot(aes(factor(ProsperScore), Investors), data = ds) +
geom_violin(alpha =0.05)+
stat_summary(fun.y="mean", geom="point", shape=21, size=1, fill='white')+
theme_economist()+
scale_x_discrete(breaks=seq(0,11,1))+
xlab("Prosper Score") + ylab("Investor Population") +
ggtitle('Investor Population With Prosper Score')
grid.arrange(Population_to_Score)
Population_to_Score <- ggplot(aes(factor(ProsperScore), Investors), data = ds) +
geom_violin(alpha =0.05)+
stat_summary(fun.y="mean", geom="point", shape=21, size=1, fill='white')+
theme_economist()+
scale_x_discrete(breaks=seq(0,11,1))+
scale_y_sqrt()+
xlab("Prosper Score") + ylab("Investor Population") +
ggtitle('Investor Population With Prosper Score')
grid.arrange(Population_to_Score)
Population_to_Score <- ggplot(aes(factor(ProsperScore), Investors), data = ds) +
geom_violin(alpha =0.05)+
stat_summary(fun.y="mean", geom="point", shape=21, size=1, fill='white')+
theme_economist()+
scale_x_discrete(breaks=seq(0,11,1))+
scale_y_sqrt()+
geom_smooth()
xlab("Prosper Score") + ylab("Investor Population") +
ggtitle('Investor Population With Prosper Score')
Population_to_Score <- ggplot(aes(factor(ProsperScore), Investors), data = ds) +
geom_violin(alpha =0.05)+
stat_summary(fun.y="mean", geom="point", shape=21, size=1, fill='white')+
theme_economist()+
scale_x_discrete(breaks=seq(0,11,1))+
scale_y_sqrt()+
xlab("Prosper Score") + ylab("Investor Population") +
ggtitle('Investor Population With Prosper Score')
grid.arrange(Population_to_Score)
ds$ProsperScore = as.numeric(ds$ProsperScore)
cols = c(5,8,9,10,13,16,40,43,47,50,64,68,81)
ds[,cols] = apply(ds[,cols], 2, function(x) as.numeric(as.character(x)))
relation_data <-  na.omit(ds[,cols])
colnames(relation_data) <- c("Term",
"APR",
"Rate",
"Yield",
"EReturn",
"Score",
"PR12",
"ABC",
"DTI",
"SMI",
"LOA",
"MLP",
"IVS")
M <- cor(relation_data)
corrplot(M,method="color")
#BorrowerAPR -> APR, BorrowerRate -> Rate, LenderYield -> Yield
#EstimatedReturn -> EReturn, ProsperScore->
#Score,PublicRecordsLast12Months -> PR12
#AvailableBankcardCredit -> ABC, StatedMonthlyIncome->SMI,MonthlyLoanPayment->MLP,LoanOriginalAmount->LOA
Return_on_Amount <- ggplot(data = ds, aes(EstimatedReturn,
LoanOriginalAmount)) +
geom_point() + facet_wrap(~ProsperScore)+
theme_economist() +
xlab("Loan Amount") + ylab("Estimated Return") +
ggtitle('Return On Loan Amount Among Different Score')
grid.arrange(Return_on_Amount)
Return_on_Amount <- ggplot(data = ds, aes(EstimatedReturn,
LoanOriginalAmount)) +
geom_point(alpha = 0.3,size = 1) +
facet_wrap(~ProsperScore)+
theme_economist() +
xlab("Loan Amount") + ylab("Estimated Return") +
ggtitle('Return On Loan Amount Among Different Score')
grid.arrange(Return_on_Amount)
Return_on_Amount <- ggplot(data = ds, aes(EstimatedReturn,
LoanOriginalAmount)) +
geom_point(alpha = 0.3,size = 6) +
facet_wrap(~ProsperScore)+
theme_economist() +
xlab("Loan Amount") + ylab("Estimated Return") +
ggtitle('Return On Loan Amount Among Different Score')
grid.arrange(Return_on_Amount)
Return_on_Amount <- ggplot(data = ds, aes(EstimatedReturn,
LoanOriginalAmount)) +
geom_point(alpha = 0.3,size = 0.1) +
facet_wrap(~ProsperScore)+
theme_economist() +
xlab("Loan Amount") + ylab("Estimated Return") +
ggtitle('Return On Loan Amount Among Different Score')
grid.arrange(Return_on_Amount)
Return_on_Amount <- ggplot(data = ds, aes(EstimatedReturn,
LoanOriginalAmount)) +
geom_point(alpha = 0.3,size = 0.1) +
facet_wrap(~ProsperScore)+
theme_economist() +
scale_x_continuous(breaks=seq(-0.2,0.3,0.2))
xlab("Loan Amount") + ylab("Estimated Return") +
ggtitle('Return On Loan Amount Among Different Score')
Return_on_Amount <- ggplot(data = ds, aes(EstimatedReturn,
LoanOriginalAmount)) +
geom_point(alpha = 0.3,size = 0.1) +
facet_wrap(~ProsperScore)+
theme_economist() +
scale_x_continuous()
xlab("Loan Amount") + ylab("Estimated Return") +
ggtitle('Return On Loan Amount Among Different Score')
Return_on_Amount <- ggplot(data = ds, aes(EstimatedReturn,
LoanOriginalAmount)) +
geom_point(alpha = 0.3,size = 0.1) +
facet_wrap(~ProsperScore)+
theme_economist() +
scale_x_discrete()
xlab("Loan Amount") + ylab("Estimated Return") +
ggtitle('Return On Loan Amount Among Different Score')
Return_on_Amount <- ggplot(data = ds, aes(EstimatedReturn,
LoanOriginalAmount)) +
geom_point(alpha = 0.3,size = 0.1) +
facet_wrap(~ProsperScore)+
theme_economist() +
xlab("Loan Amount") + ylab("Estimated Return") +
ggtitle('Return On Loan Amount Among Different Score')
grid.arrange(Return_on_Amount)
Return_on_Amount <- ggplot(data = ds, aes(EstimatedReturn,
LoanOriginalAmount)) +
geom_point(alpha = 0.3,size = 0.1) +
facet_wrap(~ProsperScore)+
theme_economist() +
scale_x_continuous()+
xlab("Loan Amount") + ylab("Estimated Return") +
ggtitle('Return On Loan Amount Among Different Score')
grid.arrange(Return_on_Amount)
Return_on_Amount <- ggplot(data = ds, aes(EstimatedReturn,
LoanOriginalAmount)) +
geom_point(alpha = 0.3,size = 0.1) +
facet_wrap(~ProsperScore)+
theme_economist() +
scale_x_continuous(breaks = seq(-0.2,0.3,0.2))+
xlab("Loan Amount") + ylab("Estimated Return") +
ggtitle('Return On Loan Amount Among Different Score')
grid.arrange(Return_on_Amount)
Return_on_Amount <- ggplot(data = ds, aes(EstimatedReturn,
LoanOriginalAmount)) +
geom_point() +
facet_wrap(~ListingCategory)+
theme_economist() +
xlab("Loan Amount") + ylab("Estimated Return") +
ggtitle('Return On Loan Amount Among Different Categories')
grid.arrange(Return_on_Amount)
Return_on_Amount <- ggplot(data = ds, aes(EstimatedReturn,
LoanOriginalAmount)) +
geom_point(alpha =0.4, size =0.1) +
facet_wrap(~ListingCategory)+
scale_x_continuous(breaks=seq(-0.2,0.3,0.2))+
theme_economist() +
xlab("Loan Amount") + ylab("Estimated Return") +
ggtitle('Return On Loan Amount Among Different Categories')
grid.arrange(Return_on_Amount)
ds$ProsperScore = as.numeric(ds$ProsperScore)
cols = c(5,8,9,10,13,16,40,43,47,50,64,68,81)
ds[,cols] = apply(ds[,cols],
2,
function(x) as.numeric(as.character(x)))
relation_data <-  na.omit(ds[,cols])
colnames(relation_data) <- c("Term",
"APR",
"Rate",
"Yield",
"EReturn",
"Score",
"PR12",
"ABC",
"DTI",
"SMI",
"LOA",
"MLP",
"IVS")
M <- cor(relation_data)
corrplot(M,method="color")
#BorrowerAPR -> APR, BorrowerRate -> Rate, LenderYield -> Yield
#EstimatedReturn -> EReturn, ProsperScore-> Score,PublicRecordsLast12Months -> PR12
#AvailableBankcardCredit -> ABC, StatedMonthlyIncome->SMI,MonthlyLoanPayment->MLP,LoanOriginalAmount->LOA
title <- "Correlation Between Different Variables"
ds$ProsperScore = as.numeric(ds$ProsperScore)
cols = c(5,8,9,10,13,16,40,43,47,50,64,68,81)
ds[,cols] = apply(ds[,cols],
2,
function(x) as.numeric(as.character(x)))
relation_data <-  na.omit(ds[,cols])
colnames(relation_data) <- c("Term",
"APR",
"Rate",
"Yield",
"EReturn",
"Score",
"PR12",
"ABC",
"DTI",
"SMI",
"LOA",
"MLP",
"IVS")
M <- cor(relation_data)
corrplot(M,method="color",
title = title)
#BorrowerAPR -> APR, BorrowerRate -> Rate, LenderYield -> Yield
#EstimatedReturn -> EReturn, ProsperScore-> Score,PublicRecordsLast12Months -> PR12
#AvailableBankcardCredit -> ABC, StatedMonthlyIncome->SMI,MonthlyLoanPayment->MLP,LoanOriginalAmount->LOA
title <- "Correlation Between Different Variables"
ds$ProsperScore = as.numeric(ds$ProsperScore)
cols = c(5,8,9,10,13,16,40,43,47,50,64,68,81)
ds[,cols] = apply(ds[,cols],
2,
function(x) as.numeric(as.character(x)))
relation_data <-  na.omit(ds[,cols])
colnames(relation_data) <- c("Term",
"APR",
"Rate",
"Yield",
"EReturn",
"Score",
"PR12",
"ABC",
"DTI",
"SMI",
"LOA",
"MLP",
"IVS")
M <- cor(relation_data)
corrplot(M,method="color",
title = title,
mar=c(0,0,1,0))
#BorrowerAPR -> APR, BorrowerRate -> Rate, LenderYield -> Yield
#EstimatedReturn -> EReturn, ProsperScore-> Score,PublicRecordsLast12Months -> PR12
#AvailableBankcardCredit -> ABC, StatedMonthlyIncome->SMI,MonthlyLoanPayment->MLP,LoanOriginalAmount->LOA
title <- "Correlation Between Different Variables"
ds$ProsperScore = as.numeric(ds$ProsperScore)
cols = c(5,8,9,10,13,16,40,43,47,50,64,68,81)
ds[,cols] = apply(ds[,cols],
2,
function(x) as.numeric(as.character(x)))
relation_data <-  na.omit(ds[,cols])
colnames(relation_data) <- c("Term",
"APR",
"Rate",
"Yield",
"EReturn",
"Score",
"PR12",
"ABC",
"DTI",
"SMI",
"LOA",
"MLP",
"IVS")
M <- cor(relation_data)
corrplot(M,method="color",
title = title,
mar=c(0,0,0.5,0))
#BorrowerAPR -> APR, BorrowerRate -> Rate, LenderYield -> Yield
#EstimatedReturn -> EReturn, ProsperScore-> Score,PublicRecordsLast12Months -> PR12
#AvailableBankcardCredit -> ABC, StatedMonthlyIncome->SMI,MonthlyLoanPayment->MLP,LoanOriginalAmount->LOA
title <- "Correlation Between Different Variables"
ds$ProsperScore = as.numeric(ds$ProsperScore)
cols = c(5,8,9,10,13,16,40,43,47,50,64,68,81)
ds[,cols] = apply(ds[,cols],
2,
function(x) as.numeric(as.character(x)))
relation_data <-  na.omit(ds[,cols])
colnames(relation_data) <- c("Term",
"APR",
"Rate",
"Yield",
"EReturn",
"Score",
"PR12",
"ABC",
"DTI",
"SMI",
"LOA",
"MLP",
"IVS")
M <- cor(relation_data)
corrplot(M,method="color",
title = title,
mar=c(0,0,1,0))
#BorrowerAPR -> APR, BorrowerRate -> Rate, LenderYield -> Yield
#EstimatedReturn -> EReturn, ProsperScore-> Score,PublicRecordsLast12Months -> PR12
#AvailableBankcardCredit -> ABC, StatedMonthlyIncome->SMI,MonthlyLoanPayment->MLP,LoanOriginalAmount->LOA
unlink('Desktop/course/data scientist/p4/project4/projecttemplate_cache', recursive = TRUE)
getwd()
setwd('/Users/rivers/Desktop/course/data scientist/p4/project4')
getwd()
prosper <- read.csv('dataSet/prosperLoanData.csv')
